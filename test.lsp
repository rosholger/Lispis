;(defun! fac (n)
  ;(if (< n 1)
      ;1
    ;(* n (fac (- n 1)))))
;fac
;
;(let! res 0)
;(for (0 (< it 10) (set! it (+ it 1)))
     ;(for (0 (< it 10) (set! it (+ it 1)))
          ;(set! res (+ res 1))))
;res
;(let! v ['a 2 3 4])
;(let! r 0);
;(:! v ,r 10)
;(: v ,r)

;(or a b c) (cond (a true) (b true) (c true) (true false))

;(defmacro! or elems
  ;(letfun! not-and (elems)
    ;(if (null? elems)
      ;'()
      ;(cons (list 'not (car elems))
            ;(not-and (cdr elems)))))
  ;(list 'not (cons 'and (not-and elems))))

;(let! a 1)
;(let! b 2)
;(let! c 3)
;(cond ((< a 1) 'a)
      ;((< b 2) 'b)
      ;(true 'd))
;(letfun! even? (a) (= (/ a 2) (// a 2)))
;(defun! filter (pred lst)
  ;(foldr (lambda (e r) (if (pred e) (cons e r) r))
         ;'() lst))
;(filter even? '(1 2 3 4 5 6))

(defun! iter (seq)
  (let! seqType (type seq))
  (cond ((eq? seqType 'vector)
         (let! id 0)
         (lambda ()
           (if (< id (size seq))
             (do
               (let! ret (: seq ,id))
               (set! id (+ id 1))
               ret)
             *undefined*)))
        ((eq? seqType 'cons)
         (lambda ()
           (if (null? seq)
             *undefined*
             (do
               (let! ret (car seq))
               (set! seq (cdr seq))
               ret))))))

(defun! foldl-iter (proc init iter)
  (let! res init)
  (for ((it (iter)) (not (undef? it)) (set! it (iter)))
       (set! res (proc it res)))
  res)

(defun! foldr-iter (proc init iter)
  (let! val (iter))
  (if (undef? val)
    init
    (proc val (foldr-iter proc init iter))))

(foldr-iter cons '() (iter [1 2 3 4 5 6 7]))

(let! t {})
(:! t q 10)
(:! t w 10)
(:! t e 10)
(:! t r 10)
(:! t t 10)
(:! t y 10)
(:! t u 10)
(:! t i 10)
(:! t o 10)
(:! t p 10)
(:! t a 10)
(:! t s 10)
(:! t d 10)
(:! t f 10)
(:! t g 10)
(:! t h 10)
(:! t j 10)
(:! t k 10)
(:! t l 10)
(:! t z 10)
(:! t x 10)
(:! t c 10)
(:! t v 10)
(:! t b 10)
(:! t n 10)
(:! t m 10)
(:! t qq 10)
(:! t ww 10)
(:! t ee 10)
(:! t rr 10)
(:! t tt 10)
(:! t yy 10)
(:! t uu 10)
(:! t ii 10)
(:! t oo 10)
(:! t pp 10)
(:! t aa 10)
(:! t ss 10)
(:! t dd 10)
t